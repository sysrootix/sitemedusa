import { Router } from 'express';
import axios from 'axios';

const router = Router();

/**
 * –ö–∞—Ä—Ç—ã API - OpenStreetMap (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –±–µ–∑ API –∫–ª—é—á–∞)
 *
 * –ó–∞–º–µ–Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:
 * - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã: OpenStreetMap Static API
 * - –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: Nominatim (OpenStreetMap)
 * - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã: Leaflet —Å OpenStreetMap —Ç–∞–π–ª–∞–º–∏
 */

/**
 * –ü—Ä–æ–∫—Å–∏ –¥–ª—è OpenStreetMap Static API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –±–µ–∑ API –∫–ª—é—á–∞)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç
 */
router.get('/static', async (req, res) => {
  try {
    const {
      l = 'map', // –¢–∏–ø –∫–∞—Ä—Ç—ã (map, satellite, hybrid, etc.)
      ll, // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ (longitude,latitude)
      z = 10, // –ú–∞—Å—à—Ç–∞–±
      size = '400,300', // –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      pt, // –ú–µ—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
      pl // –õ–∏–Ω–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
    } = req.query;

    // –ü—Ä–∏–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –Ω—É–∂–Ω—ã–º —Ç–∏–ø–∞–º —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const zoom = parseInt((Array.isArray(z) ? z[0] : z) as string) || 10;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (zoom < 1 || zoom > 18) {
      return res.status(400).json({
        success: false,
        message: 'Invalid zoom level',
        errors: ['Zoom must be between 1 and 18']
      });
    }

    console.log('üîç [OpenStreetMap Static] –í—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
      l,
      ll,
      z,
      size,
      pt,
      pl
    });

    // –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    let centerLng = 37.618423; // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let centerLat = 55.751244;

    if (ll) {
      const coords = (Array.isArray(ll) ? ll[0] : ll) as string;
      const coordParts = coords.split(',');
      const lng = coordParts[0] ? parseFloat(coordParts[0].trim()) : 0;
      const lat = coordParts[1] ? parseFloat(coordParts[1].trim()) : 0;
      if (!isNaN(lng) && !isNaN(lat)) {
        centerLng = lng;
        centerLat = lat;
      }
    }

    // –ü–∞—Ä—Å–∏–º —Ä–∞–∑–º–µ—Ä
    const sizeStr = (Array.isArray(size) ? size[0] : size) as string;
    const sizeParts = sizeStr.split(',');
    const widthStr = sizeParts[0];
    const heightStr = sizeParts[1];
    const width = widthStr ? parseInt(widthStr.trim()) || 400 : 400;
    const height = heightStr ? parseInt(heightStr.trim()) || 300 : 300;

    console.log('üìç [OpenStreetMap Static] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
      center: [centerLng, centerLat],
      size: [width, height],
      zoom,
      mapType: l
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (width <= 0 || height <= 0 || width > 2000 || height > 2000) {
      return res.status(400).json({
        success: false,
        message: 'Invalid size parameters',
        errors: ['Size must be between 1x1 and 2000x2000 pixels']
      });
    }

    // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç—ã
    console.log('‚úÖ [OpenStreetMap Static] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª–∏–¥–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç—ã');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞

    let mapImageUrl = '';

    try {
      // 1. –ü–æ–ø—Ä–æ–±—É–µ–º OpenStreetMap Static Map (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
      mapImageUrl = `https://www.openstreetmap.org/export/embed.html?bbox=${centerLng - 0.01},${centerLat - 0.01},${centerLng + 0.01},${centerLat + 0.01}&layer=mapnik&marker=${centerLat},${centerLng}`;

      console.log('üó∫Ô∏è [OpenStreetMap Static] –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenStreetMap Static');

      // –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const staticUrl = `https://staticmap.openstreetmap.de/staticmap.php?center=${centerLat},${centerLng}&zoom=${zoom}&size=${width}x${height}&maptype=mapnik`;

      console.log('üåê [OpenStreetMap Static] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL:', staticUrl);

      const response = await axios.get(staticUrl, {
        responseType: 'arraybuffer',
        timeout: 15000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (compatible; YourApp/1.0)',
          'Accept': 'image/*',
        }
      });

      console.log('‚úÖ [OpenStreetMap Static] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', {
        status: response.status,
        contentType: response.headers['content-type'],
        contentLength: response.headers['content-length']
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      res.set({
        'Content-Type': response.headers['content-type'] || 'image/png',
        'Cache-Control': 'public, max-age=3600', // –ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ 1 —á–∞—Å
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      });

      return res.send(response.data);

    } catch (osmError) {
      console.log('‚ö†Ô∏è [OpenStreetMap Static] OpenStreetMap —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É');

      // 2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å - Stamen Maps –∏–ª–∏ –¥—Ä—É–≥–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
      try {
        const altStaticUrl = `https://stamen-tiles.a.ssl.fastly.net/terrain/${zoom}/${Math.floor((centerLng + 180) / 360 * Math.pow(2, zoom))}/${Math.floor((1 - Math.log(Math.tan(centerLat * Math.PI / 180) + 1 / Math.cos(centerLat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom))}.png`;

        console.log('üîÑ [Alternative Maps] –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å');

        const response = await axios.get(altStaticUrl, {
          responseType: 'arraybuffer',
          timeout: 15000,
          headers: {
            'User-Agent': 'Mozilla/5.0 (compatible; YourApp/1.0)',
            'Accept': 'image/*',
          }
        });

        res.set({
          'Content-Type': 'image/png',
          'Cache-Control': 'public, max-age=3600',
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'GET',
          'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        });

        return res.send(response.data);

      } catch (altError) {
        console.log('‚ö†Ô∏è [Alternative Maps] –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    }

    // 3. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    console.log('üñºÔ∏è [Maps Fallback] –°–æ–∑–¥–∞–Ω–∏–µ fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ fallback
    const svgFallback = `
      <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
        <rect width="100%" height="100%" fill="#f3f4f6"/>
        <text x="50%" y="40%" font-family="Arial, sans-serif" font-size="16" fill="#6b7280" text-anchor="middle">
          –ö–∞—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        </text>
        <text x="50%" y="60%" font-family="Arial, sans-serif" font-size="12" fill="#9ca3af" text-anchor="middle">
          –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ
        </text>
        <circle cx="${width/2}" cy="${height/2}" r="5" fill="#ef4444"/>
      </svg>
    `;

    res.set({
      'Content-Type': 'image/svg+xml',
      'Cache-Control': 'public, max-age=300', // –ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ 5 –º–∏–Ω—É—Ç
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    });

    res.send(svgFallback);

  } catch (error: any) {
    console.error('‚ùå [OpenStreetMap Static] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback SVG –≤ —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏
    const fallbackSvg = `
      <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
        <rect width="100%" height="100%" fill="#f3f4f6"/>
        <text x="50%" y="40%" font-family="Arial, sans-serif" font-size="16" fill="#6b7280" text-anchor="middle">
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
        </text>
        <text x="50%" y="60%" font-family="Arial, sans-serif" font-size="12" fill="#9ca3af" text-anchor="middle">
          –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
        </text>
      </svg>
    `;

    res.set({
      'Content-Type': 'image/svg+xml',
      'Cache-Control': 'public, max-age=60', // –ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ 1 –º–∏–Ω—É—Ç—É
      'Access-Control-Allow-Origin': '*',
    });

    res.send(fallbackSvg);
    return;
  }

  // –≠—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  return;
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ (–∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Nominatim API (OpenStreetMap) - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –±–µ–∑ API –∫–ª—é—á–∞
 */
router.get('/geocode', async (req, res) => {
  try {
    const {
      ll, // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (longitude,latitude)
      format = 'json'
    } = req.query;

    console.log('üîç [OpenStreetMap Geocode] –í—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
      ll,
      format
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (!ll) {
      return res.status(400).json({
        success: false,
        message: 'Coordinates are required',
        errors: ['ll parameter is required']
      });
    }

    // –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    const coords = (Array.isArray(ll) ? ll[0] : ll) as string;
    const coordParts = coords.split(',');
    const lngStr = coordParts[0];
    const latStr = coordParts[1];
    const lng = lngStr ? parseFloat(lngStr.trim()) : 0;
    const lat = latStr ? parseFloat(latStr.trim()) : 0;

    if (isNaN(lng) || isNaN(lat)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid coordinates format',
        errors: ['Coordinates must be in format: longitude,latitude']
      });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Nominatim API (OpenStreetMap) –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    const nominatimUrl = `https://nominatim.openstreetmap.org/reverse`;

    const params = new URLSearchParams();
    params.append('format', 'json');
    params.append('lat', lat.toString());
    params.append('lon', lng.toString());
    params.append('addressdetails', '1');
    params.append('accept-language', 'ru,en');
    params.append('zoom', '18');

    const fullUrl = `${nominatimUrl}?${params.toString()}`;
    console.log('üåê [OpenStreetMap Geocode] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL:', fullUrl);

    console.log('üì° [OpenStreetMap Geocode] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Nominatim API...');

    const response = await axios.get(fullUrl, {
      timeout: 10000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; YourApp/1.0)',
        'Accept': 'application/json',
      }
    });

    console.log('‚úÖ [OpenStreetMap Geocode] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Nominatim API:', {
      status: response.status,
      statusText: response.statusText,
      contentType: response.headers['content-type']
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç Nominatim –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –Ø–Ω–¥–µ–∫—Å API
    const nominatimData: any = response.data;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
    if (!nominatimData || !nominatimData.display_name) {
      return res.status(404).json({
        success: false,
        message: 'Location not found',
        errors: ['No address found for these coordinates']
      });
    }

    const yandexCompatibleResponse = {
      response: {
        GeoObjectCollection: {
          metaDataProperty: {
            GeocoderResponseMetaData: {
              request: coords,
              results: 1,
              found: 1
            }
          },
          featureMember: [{
            GeoObject: {
              metaDataProperty: {
                GeocoderMetaData: {
                  precision: 'exact',
                  text: nominatimData.display_name || '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                  kind: 'house'
                }
              },
              name: nominatimData.display_name || '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
              description: nominatimData.address ? Object.values(nominatimData.address).map(String).join(', ') : '',
              boundedBy: nominatimData.boundingbox && Array.isArray(nominatimData.boundingbox) ? {
                Envelope: {
                  lowerCorner: `${nominatimData.boundingbox[2]} ${nominatimData.boundingbox[0]}`,
                  upperCorner: `${nominatimData.boundingbox[3]} ${nominatimData.boundingbox[1]}`
                }
              } : undefined,
              Point: {
                pos: `${lng} ${lat}`
              }
            }
          }]
        }
      }
    };

    console.log('üì§ [OpenStreetMap Geocode] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É');
    res.json(yandexCompatibleResponse);

  } catch (error: any) {
    console.error('‚ùå [OpenStreetMap Geocode] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Nominatim API:', error.message);

    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    if (error.response) {
      console.error('üìã [OpenStreetMap Geocode] –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:', {
        status: error.response.status,
        statusText: error.response.statusText,
        headers: error.response.headers,
        data: error.response.data
      });
    }

    let statusCode = 500;
    let errorMessage = 'Failed to geocode coordinates';

    if (error.response) {
      statusCode = error.response.status;
      if (error.response.status === 429) {
        errorMessage = 'Geocoding service rate limit exceeded. Please try again later.';
      }
    }

    console.log('üö® [OpenStreetMap Geocode] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç—É:', {
      statusCode,
      errorMessage,
      originalError: error.message
    });

    res.status(statusCode).json({
      success: false,
      message: errorMessage,
      errors: [error.message]
    });
    return;
  }

  // –≠—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  return;
});

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ Leaflet CSS –∏ JS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenStreetMap (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
 * –ù–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∞
 */
router.get('/leaflet-js', async (req, res) => {
  try {
    console.log('üîç [Leaflet JS] –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É Leaflet JavaScript');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º Leaflet JavaScript
    const leafletJsUrl = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';

    console.log('üåê [Leaflet JS] –ó–∞–≥—Ä—É–∑–∫–∞ —Å URL:', leafletJsUrl);

    const response = await axios.get(leafletJsUrl, {
      timeout: 30000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; YourApp/1.0)',
        'Accept': 'application/javascript',
      }
    });

    console.log('‚úÖ [Leaflet JS] –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:', {
      status: response.status,
      contentLength: response.headers['content-length']
    });

    res.set({
      'Content-Type': 'application/javascript',
      'Cache-Control': 'public, max-age=86400', // –ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥–µ–Ω—å
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    });

    res.send(response.data);
    return;

  } catch (error: any) {
    console.error('‚ùå [Leaflet JS] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error.message);

    res.status(500).json({
      success: false,
      message: 'Failed to load Leaflet JavaScript',
      errors: [error.message]
    });
    return;
  }

  // –≠—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  return;
});

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ Leaflet CSS
 */
router.get('/leaflet-css', async (req, res) => {
  try {
    console.log('üîç [Leaflet CSS] –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É Leaflet CSS');

    const leafletCssUrl = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';

    console.log('üåê [Leaflet CSS] –ó–∞–≥—Ä—É–∑–∫–∞ —Å URL:', leafletCssUrl);

    const response = await axios.get(leafletCssUrl, {
      timeout: 30000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; YourApp/1.0)',
        'Accept': 'text/css',
      }
    });

    console.log('‚úÖ [Leaflet CSS] –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:', {
      status: response.status,
      contentLength: response.headers['content-length']
    });

    res.set({
      'Content-Type': 'text/css',
      'Cache-Control': 'public, max-age=86400', // –ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥–µ–Ω—å
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    });

    res.send(response.data);
    return;

  } catch (error: any) {
    console.error('‚ùå [Leaflet CSS] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error.message);

    res.status(500).json({
      success: false,
      message: 'Failed to load Leaflet CSS',
      errors: [error.message]
    });
    return;
  }

  // –≠—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  return;
});

export default router;
